/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 0.13.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.okta.sdk.impl.resource.log;

import com.okta.sdk.impl.ds.InternalDataStore;
import com.okta.sdk.impl.resource.AbstractResource;
import com.okta.sdk.impl.resource.EnumListProperty;
import com.okta.sdk.impl.resource.EnumProperty;
import com.okta.sdk.impl.resource.IntegerProperty;
import com.okta.sdk.impl.resource.Property;
import com.okta.sdk.impl.resource.ResourceReference;
import com.okta.sdk.impl.resource.StringProperty;
import com.okta.sdk.resource.log.LogAuthenticationContext;
import com.okta.sdk.resource.log.LogAuthenticationProvider;
import com.okta.sdk.resource.log.LogCredentialProvider;
import com.okta.sdk.resource.log.LogCredentialType;
import com.okta.sdk.resource.log.LogIssuer;

import java.util.List;
import java.util.Map;


/**
 * LogAuthenticationContext
 */
@javax.annotation.Generated(
        value = "com.okta.swagger.codegen.OktaJavaClientImplCodegen",
        date  = "2018-02-11T21:21:50.835-05:00")
public class DefaultLogAuthenticationContext extends AbstractResource implements LogAuthenticationContext {

    private final static EnumProperty<LogAuthenticationProvider> authenticationProviderProperty = new EnumProperty("authenticationProvider", LogAuthenticationProvider.class);
    private final static IntegerProperty authenticationStepProperty = new IntegerProperty("authenticationStep");
    private final static EnumListProperty<LogCredentialProvider> credentialProviderProperty = new EnumListProperty("credentialProvider", LogCredentialProvider.class);
    private final static EnumListProperty<LogCredentialType> credentialTypeProperty = new EnumListProperty("credentialType", LogCredentialType.class);
    private final static StringProperty externalSessionIdProperty = new StringProperty("externalSessionId");
    private final static StringProperty _interfaceProperty = new StringProperty("interface");
    private final static ResourceReference<LogIssuer> issuerProperty = new ResourceReference("issuer", LogIssuer.class, false);

    private final static Map<String, Property> PROPERTY_DESCRIPTORS = createPropertyDescriptorMap(authenticationProviderProperty, authenticationStepProperty, credentialProviderProperty, credentialTypeProperty, externalSessionIdProperty, _interfaceProperty, issuerProperty);

    public DefaultLogAuthenticationContext(InternalDataStore dataStore) {
        super(dataStore);
    }

    public DefaultLogAuthenticationContext(InternalDataStore dataStore, Map<String, Object> properties) {
        super(dataStore, properties);
    }

    @Override
    public Map<String, Property> getPropertyDescriptors() {
        return PROPERTY_DESCRIPTORS;
    }


    public LogAuthenticationProvider getAuthenticationProvider() {
        return  getEnumProperty(authenticationProviderProperty);
    }

    public Integer getAuthenticationStep() {
        return  getIntProperty(authenticationStepProperty);
    }

    public List<LogCredentialProvider> getCredentialProvider() {
        return (List<LogCredentialProvider>) getEnumListProperty(credentialProviderProperty);
    }

    public List<LogCredentialType> getCredentialType() {
        return (List<LogCredentialType>) getEnumListProperty(credentialTypeProperty);
    }

    public String getExternalSessionId() {
        return  getString(externalSessionIdProperty);
    }

    public String getInterface() {
        return  getString(_interfaceProperty);
    }

    public LogIssuer getIssuer() {
        return  getResourceProperty(issuerProperty);
    }

}
