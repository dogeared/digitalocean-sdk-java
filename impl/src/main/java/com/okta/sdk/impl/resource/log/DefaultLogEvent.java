/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 0.13.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.okta.sdk.impl.resource.log;

import com.okta.sdk.impl.ds.InternalDataStore;
import com.okta.sdk.impl.resource.AbstractInstanceResource;
import com.okta.sdk.impl.resource.DateProperty;
import com.okta.sdk.impl.resource.EnumProperty;
import com.okta.sdk.impl.resource.Property;
import com.okta.sdk.impl.resource.ResourceListProperty;
import com.okta.sdk.impl.resource.ResourceReference;
import com.okta.sdk.impl.resource.StringProperty;
import com.okta.sdk.resource.Resource;
import com.okta.sdk.resource.log.LogActor;
import com.okta.sdk.resource.log.LogAuthenticationContext;
import com.okta.sdk.resource.log.LogClient;
import com.okta.sdk.resource.log.LogDebugContext;
import com.okta.sdk.resource.log.LogEvent;
import com.okta.sdk.resource.log.LogOutcome;
import com.okta.sdk.resource.log.LogRequest;
import com.okta.sdk.resource.log.LogSecurityContext;
import com.okta.sdk.resource.log.LogSeverity;
import com.okta.sdk.resource.log.LogTarget;
import com.okta.sdk.resource.log.LogTransaction;

import java.util.Date;
import java.util.List;
import java.util.Map;


/**
 * LogEvent
 */
@javax.annotation.Generated(
        value = "com.okta.swagger.codegen.OktaJavaClientImplCodegen",
        date  = "2018-02-11T21:21:50.835-05:00")
public class DefaultLogEvent extends AbstractInstanceResource<LogEvent> implements LogEvent {

    private final static ResourceReference<LogActor> actorProperty = new ResourceReference("actor", LogActor.class, false);
    private final static ResourceReference<LogAuthenticationContext> authenticationContextProperty = new ResourceReference("authenticationContext", LogAuthenticationContext.class, false);
    private final static ResourceReference<LogClient> clientProperty = new ResourceReference("client", LogClient.class, false);
    private final static ResourceReference<LogDebugContext> debugContextProperty = new ResourceReference("debugContext", LogDebugContext.class, false);
    private final static StringProperty displayMessageProperty = new StringProperty("displayMessage");
    private final static StringProperty eventTypeProperty = new StringProperty("eventType");
    private final static StringProperty legacyEventTypeProperty = new StringProperty("legacyEventType");
    private final static ResourceReference<LogOutcome> outcomeProperty = new ResourceReference("outcome", LogOutcome.class, false);
    private final static DateProperty publishedProperty = new DateProperty("published");
    private final static ResourceReference<LogRequest> requestProperty = new ResourceReference("request", LogRequest.class, false);
    private final static ResourceReference<LogSecurityContext> securityContextProperty = new ResourceReference("securityContext", LogSecurityContext.class, false);
    private final static EnumProperty<LogSeverity> severityProperty = new EnumProperty("severity", LogSeverity.class);
    private final static ResourceListProperty<LogTarget> targetProperty = new ResourceListProperty("target", LogTarget.class);
    private final static ResourceReference<LogTransaction> transactionProperty = new ResourceReference("transaction", LogTransaction.class, false);
    private final static StringProperty uuidProperty = new StringProperty("uuid");
    private final static StringProperty versionProperty = new StringProperty("version");

    private final static Map<String, Property> PROPERTY_DESCRIPTORS = createPropertyDescriptorMap(actorProperty, authenticationContextProperty, clientProperty, debugContextProperty, displayMessageProperty, eventTypeProperty, legacyEventTypeProperty, outcomeProperty, publishedProperty, requestProperty, securityContextProperty, severityProperty, targetProperty, transactionProperty, uuidProperty, versionProperty);

    public DefaultLogEvent(InternalDataStore dataStore) {
        super(dataStore);
    }

    public DefaultLogEvent(InternalDataStore dataStore, Map<String, Object> properties) {
        super(dataStore, properties);
    }

    @Override
    public Map<String, Property> getPropertyDescriptors() {
        return PROPERTY_DESCRIPTORS;
    }

    @Override
    public Class<? extends Resource> getResourceClass() {
        return LogEvent.class;
    }

    public LogActor getActor() {
        return  getResourceProperty(actorProperty);
    }

    public LogAuthenticationContext getAuthenticationContext() {
        return  getResourceProperty(authenticationContextProperty);
    }

    public LogClient getClient() {
        return  getResourceProperty(clientProperty);
    }

    public LogDebugContext getDebugContext() {
        return  getResourceProperty(debugContextProperty);
    }

    public String getDisplayMessage() {
        return  getString(displayMessageProperty);
    }

    public String getEventType() {
        return  getString(eventTypeProperty);
    }

    public String getLegacyEventType() {
        return  getString(legacyEventTypeProperty);
    }

    public LogOutcome getOutcome() {
        return  getResourceProperty(outcomeProperty);
    }

    public Date getPublished() {
        return  getDateProperty(publishedProperty);
    }

    public LogRequest getRequest() {
        return  getResourceProperty(requestProperty);
    }

    public LogSecurityContext getSecurityContext() {
        return  getResourceProperty(securityContextProperty);
    }

    public LogSeverity getSeverity() {
        return  getEnumProperty(severityProperty);
    }

    public List<LogTarget> getTarget() {
        return (List<LogTarget>) getResourceListProperty(targetProperty);
    }

    public LogTransaction getTransaction() {
        return  getResourceProperty(transactionProperty);
    }

    public String getUuid() {
        return  getString(uuidProperty);
    }

    public String getVersion() {
        return  getString(versionProperty);
    }

}
