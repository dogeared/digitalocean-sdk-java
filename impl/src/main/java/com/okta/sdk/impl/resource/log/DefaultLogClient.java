/*
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 0.13.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.okta.sdk.impl.resource.log;

import com.okta.sdk.impl.ds.InternalDataStore;
import com.okta.sdk.impl.resource.AbstractResource;
import com.okta.sdk.impl.resource.Property;
import com.okta.sdk.impl.resource.ResourceReference;
import com.okta.sdk.impl.resource.StringProperty;
import com.okta.sdk.resource.log.LogClient;
import com.okta.sdk.resource.log.LogGeographicalContext;
import com.okta.sdk.resource.log.LogUserAgent;

import java.util.Map;


/**
 * LogClient
 */
@javax.annotation.Generated(
        value = "com.okta.swagger.codegen.OktaJavaClientImplCodegen",
        date  = "2018-02-11T21:21:50.835-05:00")
public class DefaultLogClient extends AbstractResource implements LogClient {

    private final static StringProperty deviceProperty = new StringProperty("device");
    private final static ResourceReference<LogGeographicalContext> geographicalContextProperty = new ResourceReference("geographicalContext", LogGeographicalContext.class, false);
    private final static StringProperty idProperty = new StringProperty("id");
    private final static StringProperty ipAddressProperty = new StringProperty("ipAddress");
    private final static ResourceReference<LogUserAgent> userAgentProperty = new ResourceReference("userAgent", LogUserAgent.class, false);
    private final static StringProperty zoneProperty = new StringProperty("zone");

    private final static Map<String, Property> PROPERTY_DESCRIPTORS = createPropertyDescriptorMap(deviceProperty, geographicalContextProperty, idProperty, ipAddressProperty, userAgentProperty, zoneProperty);

    public DefaultLogClient(InternalDataStore dataStore) {
        super(dataStore);
    }

    public DefaultLogClient(InternalDataStore dataStore, Map<String, Object> properties) {
        super(dataStore, properties);
    }

    @Override
    public Map<String, Property> getPropertyDescriptors() {
        return PROPERTY_DESCRIPTORS;
    }


    public String getDevice() {
        return  getString(deviceProperty);
    }

    public LogGeographicalContext getGeographicalContext() {
        return  getResourceProperty(geographicalContextProperty);
    }

    public String getId() {
        return  getString(idProperty);
    }

    public String getIpAddress() {
        return  getString(ipAddressProperty);
    }

    public LogUserAgent getUserAgent() {
        return  getResourceProperty(userAgentProperty);
    }

    public String getZone() {
        return  getString(zoneProperty);
    }

}
